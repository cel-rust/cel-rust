use crate::{RelationOp, ArithmeticOp, ExpressionInner, Expression, UnaryOp, Member, Atom, parse_bytes, parse_string};
use std::sync::Arc;

grammar;

match {
    // Skip whitespace and comments
   r"\s*" => { },
   r"//[^\n\r]*[\n\r]*" => { },
} else {
   _
}

pub Expression: Expression = {
    <start: @L> <inner: ExpressionInner> <end: @R> => Expression{span: Some(start..end), inner}
};

pub ExpressionInner: ExpressionInner = {
    Conditional
};

pub Conditional: ExpressionInner = {
    <condition:LogicalOr> "?" <if_true:LogicalOr> ":" <if_false:Conditional> => ExpressionInner::Ternary(condition.into_expression().into(), if_true.into_expression().into(), if_false.into_expression().into()),
    LogicalOr
};

pub LogicalOr: ExpressionInner = {
    <left:LogicalOr> "||" <right:LogicalAnd> => ExpressionInner::Or(left.into_expression().into(), right.into_expression().into()),
    LogicalAnd
};

pub LogicalAnd: ExpressionInner = {
    <left:LogicalAnd> "&&" <right:Relations> => ExpressionInner::And(left.into_expression().into(), right.into_expression().into()),
    Relations
};

pub Relations: ExpressionInner = {
    <left:ArithmeticAddSub> <op:RelationOp> <right:ArithmeticAddSub> => ExpressionInner::Relation(left.into_expression().into(), op, right.into_expression().into()),
    ArithmeticAddSub
};

pub ArithmeticAddSub: ExpressionInner = {
    <left:ArithmeticAddSub> <op:ArithmeticOpAddSub> <right:ArithmeticMulDivMod> => ExpressionInner::Arithmetic(left.into_expression().into(), op, right.into_expression().into()),
    ArithmeticMulDivMod
};

pub ArithmeticMulDivMod: ExpressionInner = {
    <left:ArithmeticMulDivMod> <op:ArithmeticOpMulDivMod> <right:Unary> => ExpressionInner::Arithmetic(left.into_expression().into(), op, right.into_expression().into()),
    Unary
};

pub Unary: ExpressionInner = {
    <op:UnaryOp> <right:Member> => ExpressionInner::Unary(op, right.into_expression().into()),
    Member
};

pub Member: ExpressionInner = {
    <left:Member> "." <identifier:Ident> => ExpressionInner::Member(left.into_expression().into(), Member::Attribute(identifier.into()).into()).into(),
    <left:Member> "." <identifier:Ident> "(" <arguments:CommaSeparated<Expression>> ")" => {
           ExpressionInner::FunctionCall(ExpressionInner::Ident(identifier).into_expression().into(), Some(left.into_expression().into()), arguments).into()
   },
    <left:Member> "[" <expression:Expression> "]" => ExpressionInner::Member(left.into_expression().into(), Member::Index(expression.into()).into()).into(),
    <left:Member> "{" <fields:CommaSeparated<FieldInits>> "}" => ExpressionInner::Member(left.into_expression().into(), Member::Fields(fields.into()).into()).into(),
    Primary,
}

pub Primary: ExpressionInner = {
    "."? <Ident> => ExpressionInner::Ident(<>.into()).into(),
    "."? <identifier:Ident> "(" <arguments:CommaSeparated<Expression>> ")" => {
           ExpressionInner::FunctionCall(ExpressionInner::Ident(identifier).into_expression().into(), None, arguments).into()
    },
    Atom => ExpressionInner::Atom(<>).into(),
    "[" <members:CommaSeparated<Expression>> "]" => ExpressionInner::List(<>).into(),
    "{" <fields:CommaSeparated<MapInits>> "}" => ExpressionInner::Map(<>).into(),
    "(" <ExpressionInner> ")"
}

pub FieldInits: (Arc<String>, Expression) = {
    <Ident> ":" <Expression>
}

pub MapInits: (Expression, Expression) = {
    <Expression> ":" <Expression>
}

CommaSeparated<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};

ArithmeticOpAddSub: ArithmeticOp = {
    "+" => ArithmeticOp::Add,
    "-" => ArithmeticOp::Subtract
};

ArithmeticOpMulDivMod: ArithmeticOp = {
    "*" => ArithmeticOp::Multiply,
    "/" => ArithmeticOp::Divide,
    "%" => ArithmeticOp::Modulus
};


UnaryOp: UnaryOp = {
    "!" => UnaryOp::Not,
    "!!" => UnaryOp::DoubleNot,
    "-" => UnaryOp::Minus,
    "--" => UnaryOp::DoubleMinus,
}

RelationOp: RelationOp = {
    "<" => RelationOp::LessThan,
    "<=" => RelationOp::LessThanEq,
    ">" => RelationOp::GreaterThan,
    ">=" => RelationOp::GreaterThanEq,
    "==" => RelationOp::Equals,
    "!=" => RelationOp::NotEquals,
    "in" => RelationOp::In
}

Atom: Atom = {
    // Integer literals. Annoying to parse :/
    r"-?[0-9]+" => Atom::Int(<>.parse().unwrap()),
    <s:r"-?0[xX][0-9a-fA-F]+"> => Atom::Int(i64::from_str_radix(&s.chars().filter(|&x| x != 'x' && x != 'X').collect::<String>(), 16).unwrap()),
    <s:r"[0-9]+[uU]"> => Atom::UInt(s[..s.len()-1].parse().unwrap()),
    <s:r"-?0[xX][0-9a-fA-F]+[uU]"> => Atom::UInt(u64::from_str_radix(&s.chars().filter(|&x| x != 'x' && x != 'X' && x != 'u' && x != 'U').collect::<String>(), 16).unwrap()),

    // Float with decimals and optional exponent
    r"([-+]?[0-9]*\.[0-9]+([eE][-+]?[0-9]+)?)" => Atom::Float(<>.parse().unwrap()),
    // Float with no decimals and required exponent
    r"[-+]?[0-9]+[eE][-+]?[0-9]+" => Atom::Float(<>.parse().unwrap()),

    // NOTE: I've commented out some of the more complex string parsing rules
    // because they're causing "attempt to subtract with overflow" errors within
    // the LALRPOP parser.

    // Double quoted string
    // I used ChatGPT to come up with this pattern and the explanation is as follows:
    //   1. `"`: Match the opening double quote.
    //   2. `([^"\\]*(?:\\.[^"\\]*)*)`: This is the main part of the regex which matches the content inside the double quotes.
    //     a. `[^"\\]*`: Match any sequence of characters that are neither a double quote nor a backslash.
    //     b. `(?:\\.[^"\\]*)*`: This part matches an escaped character followed by any sequence of characters that are
    //        neither a double quote nor a backslash. It uses a non-capturing group (?:...) to repeat the pattern.
    //        This handles sequences like \", \\, or any other escaped character.
    //   3. `"`: Match the closing double quote.
    r#""([^"\\]*(?:\\.[^"\\]*)*)""# => Atom::String(parse_string(<>).unwrap().into()),
    r#"[rR]"([^"\\]*(?:\\.[^"\\]*)*)""# => Atom::String(parse_string(<>).unwrap().into()),
    // r#""""(\\.|[^"{3}])*""""# => Atom::String(<>.to_string().into()),

    // Single quoted string
    // Uses similar regex as above, but replace double quote with a single one
    r#"'([^'\\]*(?:\\.[^'\\]*)*)'"# => Atom::String(parse_string(<>).unwrap().into()),
    r#"[rR]'([^'\\]*(?:\\.[^'\\]*)*)'"# => Atom::String(parse_string(<>).unwrap().into()),
    // r#"'''(\\.|[^'{3}])*'''"# => Atom::String(<>.to_string().into()),

    // Double quoted bytes
    r#"[bB]"(\\.|[^"\n])*""# => Atom::Bytes(parse_bytes(&<>[2..<>.len()-1]).unwrap().into()),
    // r#"[bB]"""(\\.|[^"{3}])*""""# => Atom::Bytes(Vec::from(<>.as_bytes()).into()),

    // Single quoted bytes
    r#"[bB]'(\\.|[^'\n])*'"# => Atom::Bytes(parse_bytes(&<>[2..<>.len()-1]).unwrap().into()),
    // r#"[bB]'''(\\.|[^'{3}])*'''"# => Atom::Bytes(Vec::from(<>.as_bytes()).into()),

    "true" => Atom::Bool(true),
    "false" => Atom::Bool(false),
    "null" => Atom::Null,
};

Ident: Arc<String> = {
    r"[_a-zA-Z][_a-zA-Z0-9]*" => Arc::from(<>.to_string())
}